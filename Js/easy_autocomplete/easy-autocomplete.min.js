/*
 * easy-autocomplete
 * jQuery plugin for autocompletion
 * 
 * @author Łukasz Pawełczak (http://github.com/pawelczak)
 * @version 1.3.5
 * Copyright  License: 
 */

var EasyAutocomplete = (function (b) { b.Configuration = function a(k) { var f = { data: "list-required", url: "list-required", dataType: "json", listLocation: function (l) { return l }, xmlElementName: "", getValue: function (l) { return l }, autocompleteOff: true, placeholder: false, ajaxCallback: function () { }, matchResponseProperty: false, list: { sort: { enabled: false, method: function (m, l) { m = f.getValue(m); l = f.getValue(l); if (m < l) { return -1 } if (m > l) { return 1 } return 0 } }, maxNumberOfElements: 6, hideOnEmptyPhrase: true, match: { enabled: false, caseSensitive: false, method: function (m, l) { if (m.search(l) > -1) { return true } else { return false } } }, showAnimation: { type: "normal", time: 400, callback: function () { } }, hideAnimation: { type: "normal", time: 400, callback: function () { } }, onClickEvent: function () { }, onSelectItemEvent: function () { }, onLoadEvent: function () { }, onChooseEvent: function () { }, onKeyEnterEvent: function () { }, onMouseOverEvent: function () { }, onMouseOutEvent: function () { }, onShowListEvent: function () { }, onHideListEvent: function () { } }, highlightPhrase: true, theme: "", cssClasses: "", minCharNumber: 0, requestDelay: 0, adjustWidth: true, ajaxSettings: {}, preparePostData: function (m, l) { return m }, loggerEnabled: true, template: "", categoriesAssigned: false, categories: [{ maxNumberOfElements: 4 }] }; var i = ["ajaxSettings", "template"]; this.get = function (l) { return f[l] }; this.equals = function (l, m) { if (g(l)) { if (f[l] === m) { return true } } return false }; this.checkDataUrlProperties = function () { if (f.url === "list-required" && f.data === "list-required") { return false } return true }; this.checkRequiredProperties = function () { for (var l in f) { if (f[l] === "required") { logger.error("Option " + l + " must be defined"); return false } } return true }; this.printPropertiesThatDoesntExist = function (l, m) { j(l, m) }; e(); d(); if (f.loggerEnabled === true) { j(console, k) } h(); c(); function e() { if (k.dataType === "xml") { if (!k.getValue) { k.getValue = function (q) { return $(q).text() } } if (!k.list) { k.list = {} } if (!k.list.sort) { k.list.sort = {} } k.list.sort.method = function (r, q) { r = k.getValue(r); q = k.getValue(q); if (r < q) { return -1 } if (r > q) { return 1 } return 0 }; if (!k.list.match) { k.list.match = {} } k.list.match.method = function (r, q) { if (r.search(q) > -1) { return true } else { return false } } } if (k.categories !== undefined && k.categories instanceof Array) { var l = []; for (var m = 0, o = k.categories.length; m < o; m += 1) { var n = k.categories[m]; for (var p in f.categories[0]) { if (n[p] === undefined) { n[p] = f.categories[0][p] } } l.push(n) } k.categories = l } } function d() { f = l(f, k); function l(n, o) { var p = n || {}; for (var m in n) { if (o[m] !== undefined && o[m] !== null) { if (typeof o[m] !== "object" || o[m] instanceof Array) { p[m] = o[m] } else { l(n[m], o[m]) } } } if (o.data !== undefined && o.data !== null && typeof o.data === "object") { p.data = o.data } return p } } function c() { if (f.url !== "list-required" && typeof f.url !== "function") { var l = f.url; f.url = function () { return l } } if (f.ajaxSettings.url !== undefined && typeof f.ajaxSettings.url !== "function") { var l = f.ajaxSettings.url; f.ajaxSettings.url = function () { return l } } if (typeof f.listLocation === "string") { var m = f.listLocation; if (f.dataType.toUpperCase() === "XML") { f.listLocation = function (o) { return $(o).find(m) } } else { f.listLocation = function (o) { return o[m] } } } if (typeof f.getValue === "string") { var n = f.getValue; f.getValue = function (o) { return o[n] } } if (k.categories !== undefined) { f.categoriesAssigned = true } } function h() { if (k.ajaxSettings !== undefined && typeof k.ajaxSettings === "object") { f.ajaxSettings = k.ajaxSettings } else { f.ajaxSettings = {} } } function g(l) { if (f[l] !== undefined && f[l] !== null) { return true } else { return false } } function j(l, m) { n(f, m); function n(p, q) { for (var o in q) { if (p[o] === undefined) { l.log("Property '" + o + "' does not exist in EasyAutocomplete options API.") } if (typeof p[o] === "object" && $.inArray(o, i) === -1) { n(p[o], q[o]) } } } } }; return b })(EasyAutocomplete || {}); var EasyAutocomplete = (function (b) { b.Logger = function a() { this.error = function (c) { console.log("ERROR: " + c) }; this.warning = function (c) { console.log("WARNING: " + c) } }; return b })(EasyAutocomplete || {}); var EasyAutocomplete = (function (a) { a.Constans = function b() { var c = { CONTAINER_CLASS: "easy-autocomplete-container", CONTAINER_ID: "eac-container-", WRAPPER_CSS_CLASS: "easy-autocomplete" }; this.getValue = function (d) { return c[d] } }; return a })(EasyAutocomplete || {}); var EasyAutocomplete = (function (b) { b.ListBuilderService = function a(f, d) { this.init = function (i) { var h = [], g = {}; g.data = f.get("listLocation")(i); g.getValue = f.get("getValue"); g.maxListSize = f.get("list").maxNumberOfElements; h.push(g); return h }; this.updateCategories = function (h, k) { if (f.get("categoriesAssigned")) { h = []; for (var j = 0; j < f.get("categories").length; j += 1) { var g = c(f.get("categories")[j], k); h.push(g) } } return h }; this.convertXml = function (g) { if (f.get("dataType").toUpperCase() === "XML") { for (var h = 0; h < g.length; h += 1) { g[h].data = e(g[h]) } } return g }; this.processData = function (g, k) { for (var h = 0, j = g.length; h < j; h += 1) { g[h].data = d(f, g[h], k) } return g }; this.checkIfDataExists = function (g) { for (var h = 0, j = g.length; h < j; h += 1) { if (g[h].data !== undefined && g[h].data instanceof Array) { if (g[h].data.length > 0) { return true } } } return false }; function c(i, j) { var h = {}; if (f.get("dataType").toUpperCase() === "XML") { h = k() } else { h = g() } if (i.header !== undefined) { h.header = i.header } if (i.maxNumberOfElements !== undefined) { h.maxNumberOfElements = i.maxNumberOfElements } if (f.get("list").maxNumberOfElements !== undefined) { h.maxListSize = f.get("list").maxNumberOfElements } if (i.getValue !== undefined) { if (typeof i.getValue === "string") { var l = i.getValue; h.getValue = function (m) { return m[l] } } else { if (typeof i.getValue === "function") { h.getValue = i.getValue } } } else { h.getValue = f.get("getValue") } return h; function k() { var m = {}, n; if (i.xmlElementName !== undefined) { m.xmlElementName = i.xmlElementName } if (i.listLocation !== undefined) { n = i.listLocation } else { if (f.get("listLocation") !== undefined) { n = f.get("listLocation") } } if (n !== undefined) { if (typeof n === "string") { m.data = $(j).find(n) } else { if (typeof n === "function") { m.data = n(j) } } } else { m.data = j } return m } function g() { var m = {}; if (i.listLocation !== undefined) { if (typeof i.listLocation === "string") { m.data = j[i.listLocation] } else { if (typeof i.listLocation === "function") { m.data = i.listLocation(j) } } } else { m.data = j } return m } } function e(g) { var h = []; if (g.xmlElementName === undefined) { g.xmlElementName = f.get("xmlElementName") } $(g.data).find(g.xmlElementName).each(function () { h.push(this) }); return h } }; return b })(EasyAutocomplete || {}); var EasyAutocomplete = (function (a) { a.proccess = function b(c, i, d) { a.proccess.match = g; var h = i.data, f = d; h = k(h, f); h = j(h); h = e(h); return h; function k(p, l) { var q = [], o = ""; if (c.get("list").match.enabled) { for (var m = 0, n = p.length; m < n; m += 1) { o = c.get("getValue")(p[m]); if (g(o, l)) { q.push(p[m]) } } } else { q = p } return q } function g(m, l) { if (!c.get("list").match.caseSensitive) { if (typeof m === "string") { m = m.toLowerCase() } l = l.toLowerCase() } if (c.get("list").match.method(m, l)) { return true } else { return false } } function j(l) { if (i.maxNumberOfElements !== undefined && l.length > i.maxNumberOfElements) { l = l.slice(0, i.maxNumberOfElements) } return l } function e(l) { if (c.get("list").sort.enabled) { l.sort(c.get("list").sort.method) } return l } }; return a })(EasyAutocomplete || {}); var EasyAutocomplete = (function (a) { a.Template = function b(c) { var e = { basic: { type: "basic", method: function (h) { return h }, cssClass: "" }, description: { type: "description", fields: { description: "description" }, method: function (h) { return h + " - description" }, cssClass: "eac-description" }, iconLeft: { type: "iconLeft", fields: { icon: "" }, method: function (h) { return h }, cssClass: "eac-icon-left" }, iconRight: { type: "iconRight", fields: { iconSrc: "" }, method: function (h) { return h }, cssClass: "eac-icon-right" }, links: { type: "links", fields: { link: "" }, method: function (h) { return h }, cssClass: "" }, custom: { type: "custom", method: function () { }, cssClass: "" } }, d = function (j) { var h = j.fields, i; if (j.type === "description") { i = e.description.method; if (typeof h.description === "string") { i = function (l, k) { return l + " - <span>" + k[h.description] + "</span>" } } else { if (typeof h.description === "function") { i = function (l, k) { return l + " - <span>" + h.description(k) + "</span>" } } } return i } if (j.type === "iconRight") { if (typeof h.iconSrc === "string") { i = function (l, k) { return l + "<img class='eac-icon' src='" + k[h.iconSrc] + "' />" } } else { if (typeof h.iconSrc === "function") { i = function (l, k) { return l + "<img class='eac-icon' src='" + h.iconSrc(k) + "' />" } } } return i } if (j.type === "iconLeft") { if (typeof h.iconSrc === "string") { i = function (l, k) { return "<img class='eac-icon' src='" + k[h.iconSrc] + "' />" + l } } else { if (typeof h.iconSrc === "function") { i = function (l, k) { return "<img class='eac-icon' src='" + h.iconSrc(k) + "' />" + l } } } return i } if (j.type === "links") { if (typeof h.link === "string") { i = function (l, k) { return "<a href='" + k[h.link] + "' >" + l + "</a>" } } else { if (typeof h.link === "function") { i = function (l, k) { return "<a href='" + h.link(k) + "' >" + l + "</a>" } } } return i } if (j.type === "custom") { return j.method } return e.basic.method }, g = function (h) { if (!h || !h.type) { return e.basic.method } if (h.type && e[h.type]) { return d(h) } else { return e.basic.method } }, f = function (h) { var i = function () { return "" }; if (!h || !h.type) { return i } if (h.type && e[h.type]) { return (function () { var j = e[h.type].cssClass; return function () { return j } })() } else { return i } }; this.getTemplateClass = f(c); this.build = g(c) }; return a })(EasyAutocomplete || {}); var EasyAutocomplete = (function (scope) { scope.main = function Core($input, options) { var module = { name: "EasyAutocomplete", shortcut: "eac" }; var consts = new scope.Constans(), config = new scope.Configuration(options), logger = new scope.Logger(), template = new scope.Template(options.template), listBuilderService = new scope.ListBuilderService(config, scope.proccess), checkParam = config.equals, $field = $input, $container = "", elementsList = [], selectedElement = -1, requestDelayTimeoutId; scope.consts = consts; this.getConstants = function () { return consts }; this.getConfiguration = function () { return config }; this.getContainer = function () { return $container }; this.getSelectedItemIndex = function () { return selectedElement }; this.getItems = function () { return elementsList }; this.getItemData = function (index) { if (elementsList.length < index || elementsList[index] === undefined) { return -1 } else { return elementsList[index] } }; this.getSelectedItemData = function () { return this.getItemData(selectedElement) }; this.build = function () { prepareField() }; this.init = function () { init() }; function init() { if ($field.length === 0) { logger.error("Input field doesn't exist."); return } if (!config.checkDataUrlProperties()) { logger.error("One of options variables 'data' or 'url' must be defined."); return } if (!config.checkRequiredProperties()) { logger.error("Will not work without mentioned properties."); return } prepareField(); bindEvents() } function prepareField() { if ($field.parent().hasClass(consts.getValue("WRAPPER_CSS_CLASS"))) { removeContainer(); removeWrapper() } createWrapper(); createContainer(); $container = $("#" + getContainerId()); if (config.get("placeholder")) { $field.attr("placeholder", config.get("placeholder")) } function createWrapper() { var $wrapper = $("<div>"), classes = consts.getValue("WRAPPER_CSS_CLASS"); if (config.get("theme") && config.get("theme") !== "") { classes += " eac-" + config.get("theme") } if (config.get("cssClasses") && config.get("cssClasses") !== "") { classes += " " + config.get("cssClasses") } if (template.getTemplateClass() !== "") { classes += " " + template.getTemplateClass() } $wrapper.addClass(classes); $field.wrap($wrapper); if (config.get("adjustWidth") === true) { adjustWrapperWidth() } } function adjustWrapperWidth() { var fieldWidth = $field.outerWidth(); $field.parent().css("width", fieldWidth) } function removeWrapper() { $field.unwrap() } function createContainer() { var $elements_container = $("<div>").addClass(consts.getValue("CONTAINER_CLASS")); $elements_container.attr("id", getContainerId()).prepend($("<ul>")); (function () { $elements_container.on("show.eac", function () { switch (config.get("list").showAnimation.type) { case "slide": var animationTime = config.get("list").showAnimation.time, callback = config.get("list").showAnimation.callback; $elements_container.find("ul").slideDown(animationTime, callback); break; case "fade": var animationTime = config.get("list").showAnimation.time, callback = config.get("list").showAnimation.callback; $elements_container.find("ul").fadeIn(animationTime), callback; break; default: $elements_container.find("ul").show(); break } config.get("list").onShowListEvent() }).on("hide.eac", function () { switch (config.get("list").hideAnimation.type) { case "slide": var animationTime = config.get("list").hideAnimation.time, callback = config.get("list").hideAnimation.callback; $elements_container.find("ul").slideUp(animationTime, callback); break; case "fade": var animationTime = config.get("list").hideAnimation.time, callback = config.get("list").hideAnimation.callback; $elements_container.find("ul").fadeOut(animationTime, callback); break; default: $elements_container.find("ul").hide(); break } config.get("list").onHideListEvent() }).on("selectElement.eac", function () { $elements_container.find("ul li").removeClass("selected"); $elements_container.find("ul li").eq(selectedElement).addClass("selected"); config.get("list").onSelectItemEvent() }).on("loadElements.eac", function (event, listBuilders, phrase) { var $item = "", $listContainer = $elements_container.find("ul"); $listContainer.empty().detach(); elementsList = []; var counter = 0; for (var builderIndex = 0, listBuildersLength = listBuilders.length; builderIndex < listBuildersLength; builderIndex += 1) { var listData = listBuilders[builderIndex].data; if (listData.length === 0) { continue } if (listBuilders[builderIndex].header !== undefined && listBuilders[builderIndex].header.length > 0) { $listContainer.append("<div class='eac-category' >" + listBuilders[builderIndex].header + "</div>") } for (var i = 0, listDataLength = listData.length; i < listDataLength && counter < listBuilders[builderIndex].maxListSize; i += 1) { $item = $("<li><div class='eac-item'></div></li>"); (function () { var j = i, itemCounter = counter, elementsValue = listBuilders[builderIndex].getValue(listData[j]); $item.find(" > div").on("click", function () { $field.val(elementsValue).trigger("change"); selectedElement = itemCounter; selectElement(itemCounter); config.get("list").onClickEvent(); config.get("list").onChooseEvent() }).mouseover(function () { selectedElement = itemCounter; selectElement(itemCounter); config.get("list").onMouseOverEvent() }).mouseout(function () { config.get("list").onMouseOutEvent() }).html(template.build(highlight(elementsValue, phrase), listData[j])) })(); $listContainer.append($item); elementsList.push(listData[i]); counter += 1 } } $elements_container.append($listContainer); config.get("list").onLoadEvent() }) })(); $field.after($elements_container) } function removeContainer() { $field.next("." + consts.getValue("CONTAINER_CLASS")).remove() } function highlight(string, phrase) { if (config.get("highlightPhrase") && phrase !== "") { return highlightPhrase(string, phrase) } else { return string } } function escapeRegExp(str) { return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") } function highlightPhrase(string, phrase) { var escapedPhrase = escapeRegExp(phrase); return (string + "").replace(new RegExp("(" + escapedPhrase + ")", "gi"), "<b>$1</b>") } } function getContainerId() { var elementId = $field.attr("id"); elementId = consts.getValue("CONTAINER_ID") + elementId; return elementId } function bindEvents() { bindAllEvents(); function bindAllEvents() { if (checkParam("autocompleteOff", true)) { removeAutocomplete() } bindFocusOut(); bindKeyup(); bindKeydown(); bindKeypress(); bindFocus(); bindBlur() } function bindFocusOut() { $field.focusout(function () { var fieldValue = $field.val(), phrase; if (!config.get("list").match.caseSensitive) { fieldValue = fieldValue.toLowerCase() } for (var i = 0, length = elementsList.length; i < length; i += 1) { phrase = config.get("getValue")(elementsList[i]); if (!config.get("list").match.caseSensitive) { phrase = phrase.toLowerCase() } if (phrase === fieldValue) { selectedElement = i; selectElement(selectedElement); return } } }) } function bindKeyup() { $field.off("keyup").keyup(function (event) { switch (event.keyCode) { case 27: hideContainer(); loseFieldFocus(); break; case 38: event.preventDefault(); if (elementsList.length > 0 && selectedElement > 0) { selectedElement -= 1; $field.val(config.get("getValue")(elementsList[selectedElement])); selectElement(selectedElement) } break; case 40: event.preventDefault(); if (elementsList.length > 0 && selectedElement < elementsList.length - 1) { selectedElement += 1; $field.val(config.get("getValue")(elementsList[selectedElement])); selectElement(selectedElement) } break; default: if (event.keyCode > 40 || event.keyCode === 8) { var inputPhrase = $field.val(); if (!(config.get("list").hideOnEmptyPhrase === true && event.keyCode === 8 && inputPhrase === "")) { if (config.get("requestDelay") > 0) { if (requestDelayTimeoutId !== undefined) { clearTimeout(requestDelayTimeoutId) } requestDelayTimeoutId = setTimeout(function () { loadData(inputPhrase) }, config.get("requestDelay")) } else { loadData(inputPhrase) } } else { hideContainer() } } break } function loadData(inputPhrase) { if (inputPhrase.length < config.get("minCharNumber")) { return } if (config.get("data") !== "list-required") { var data = config.get("data"); var listBuilders = listBuilderService.init(data); listBuilders = listBuilderService.updateCategories(listBuilders, data); listBuilders = listBuilderService.processData(listBuilders, inputPhrase); loadElements(listBuilders, inputPhrase); if ($field.parent().find("li").length > 0) { showContainer() } else { hideContainer() } } var settings = createAjaxSettings(); if (settings.url === undefined || settings.url === "") { settings.url = config.get("url") } if (settings.dataType === undefined || settings.dataType === "") { settings.dataType = config.get("dataType") } if (settings.url !== undefined && settings.url !== "list-required") { settings.url = settings.url(inputPhrase); settings.data = config.get("preparePostData")(settings.data, inputPhrase); $.ajax(settings).done(function (data) { data = (typeof data.d) == "string" ? eval("(" + data.d + ")") : data.d; var listBuilders = listBuilderService.init(data); listBuilders = listBuilderService.updateCategories(listBuilders, data); listBuilders = listBuilderService.convertXml(listBuilders); if (checkInputPhraseMatchResponse(inputPhrase, data)) { listBuilders = listBuilderService.processData(listBuilders, inputPhrase); loadElements(listBuilders, inputPhrase) } if (listBuilderService.checkIfDataExists(listBuilders) && $field.parent().find("li").length > 0) { showContainer() } else { hideContainer() } config.get("ajaxCallback")() }).fail(function () { logger.warning("Fail to load response data") }).always(function () { }) } function createAjaxSettings() { var settings = {}, ajaxSettings = config.get("ajaxSettings") || {}; for (var set in ajaxSettings) { settings[set] = ajaxSettings[set] } return settings } function checkInputPhraseMatchResponse(inputPhrase, data) { if (config.get("matchResponseProperty") !== false) { if (typeof config.get("matchResponseProperty") === "string") { return (data[config.get("matchResponseProperty")] === inputPhrase) } if (typeof config.get("matchResponseProperty") === "function") { return (config.get("matchResponseProperty")(data) === inputPhrase) } return true } else { return true } } } }) } function bindKeydown() { $field.on("keydown", function (evt) { evt = evt || window.event; var keyCode = evt.keyCode; if (keyCode === 38) { suppressKeypress = true; return false } }).keydown(function (event) { if (event.keyCode === 13 && selectedElement > -1) { $field.val(config.get("getValue")(elementsList[selectedElement])); config.get("list").onKeyEnterEvent(); config.get("list").onChooseEvent(); selectedElement = -1; hideContainer(); event.preventDefault() } }) } function bindKeypress() { $field.off("keypress") } function bindFocus() { $field.focus(function () { if ($field.val() !== "" && elementsList.length > 0) { selectedElement = -1; showContainer() } }) } function bindBlur() { $field.blur(function () { setTimeout(function () { selectedElement = -1; hideContainer() }, 250) }) } function removeAutocomplete() { $field.attr("autocomplete", "off") } } function showContainer() { $container.trigger("show.eac") } function hideContainer() { $container.trigger("hide.eac") } function selectElement(index) { $container.trigger("selectElement.eac", index) } function loadElements(list, phrase) { $container.trigger("loadElements.eac", [list, phrase]) } function loseFieldFocus() { $field.trigger("blur") } }; scope.eacHandles = []; scope.getHandle = function (id) { return scope.eacHandles[id] }; scope.inputHasId = function (input) { if ($(input).attr("id") !== undefined && $(input).attr("id").length > 0) { return true } else { return false } }; scope.assignRandomId = function (input) { var fieldId = ""; do { fieldId = "eac-" + Math.floor(Math.random() * 10000) } while ($("#" + fieldId).length !== 0); elementId = scope.consts.getValue("CONTAINER_ID") + fieldId; $(input).attr("id", fieldId) }; scope.setHandle = function (handle, id) { scope.eacHandles[id] = handle }; return scope })(EasyAutocomplete || {}); (function (a) { a.fn.easyAutocomplete = function (b) { return this.each(function () { var d = a(this), c = new EasyAutocomplete.main(d, b); if (!EasyAutocomplete.inputHasId(d)) { EasyAutocomplete.assignRandomId(d) } c.init(); EasyAutocomplete.setHandle(c, d.attr("id")) }) }; a.fn.getSelectedItemIndex = function () { var b = a(this).attr("id"); if (b !== undefined) { return EasyAutocomplete.getHandle(b).getSelectedItemIndex() } return -1 }; a.fn.getItems = function () { var b = a(this).attr("id"); if (b !== undefined) { return EasyAutocomplete.getHandle(b).getItems() } return -1 }; a.fn.getItemData = function (c) { var b = a(this).attr("id"); if (b !== undefined && c > -1) { return EasyAutocomplete.getHandle(b).getItemData(c) } return -1 }; a.fn.getSelectedItemData = function () { var b = a(this).attr("id"); if (b !== undefined) { return EasyAutocomplete.getHandle(b).getSelectedItemData() } return -1 } })(jQuery);